#include <stdio.h>
#include <cstdlib>
#include <ctime>
using namespace std;

class Process{

private:
    int rank; // Generated by MPI
    bool active; // Is Process active or passive
    int id; // stores the randomly generated ID for this process
    bool init; // Is the Process finished generating its own ID

    void computeID(int size) // Function for generating ID called in the constructor
    {
        int* idList;
        idList = new int[size];
        for(int i =0; i<size; i++) // because of our seed, we have to call rand() multiple times to truely get a random number
        {
            idList[i] = rand()%(size*100); // get a random int in range 0 - size*100. We multiply size by 100 to reduce the chances of duplicate ID's for two processes. 
        }
        id = idList[rank]; // Probablity of another process having this ID is about .01 or 1%
        init = true; // we now have our ID so we can set our init to true
    }

public:
    // Default Constructor
    Process(int rk, int size){
        init = false; // start with init set to false so we can set it to true after random ID is generated
        srand(time(0)); // initialize rand() with a new seed
        rank =rk;
        active = true; // all processes start as active processes
        computeID(size); // now we call the computeID() which will generate a random ID for this function
    }

    // Simple public functions for accessing private variables
    int getRank(){
        return rank;
    }
    int getID(){
        return id;
    }
    bool finishedInit(){
        return init;   
    }
    bool isActive(){
        return active;
    }
    void setActive(bool status){
        active = status;
    }
};